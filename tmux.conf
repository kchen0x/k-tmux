#==========================================
# URL: https://github.com/wklken/k-tmux
# Author:  wklken
# Version: 0.2
# Email: wklken@yeah.net
# ReadMe: README.md
# Donation: http://www.wklken.me/pages/donation.html
# Last_modify: 2015-08-06
#==========================================
# Forker information
# Forker: kchen0x
# URL: https://github.com/kchen0x/k-tmux
# Last_modify: Oct 18, 2018
# Based on: Tmux 2.3 @ Mac OS 10.11/ Ubuntu 14
#==========================================
# Dependecny:
#    1. brew install reattach-to-user-namespace
#    2. gem install tmuxinator
#    3. vim: christoomey/vim-tmux-navigator


#--------------------------- base config begin --------------------------------

# 全局设置
setw -g xterm-keys on
set -g default-terminal "screen-256color"  # 设置终端类型为256色
set -g history-limit 100000                # 回滚行数设置
set -g display-time 5000                   # 提示信息的持续时间；设置足够的时间以避免看不清提示，单位为毫秒
set -g repeat-time 1500                    # 控制台激活后的持续时间；设置合适的时间以避免每次操作都要先激活控制台，单位为毫秒
setw -g display-panes-time 1500
#set -g repeat-time 0                      # 控制台激活后的持续时间设置为0，这样在敲完命令后可以马上使用方向键
# 24 hour clock
setw -g clock-mode-style 24

set -g renumber-windows on                 # 开启窗口重编号，1、2、3，移除2后变为1、2

#  设置窗口通知
setw -g monitor-activity on
set -g visual-activity on

# 把修饰键绑定为 C-a
set -g prefix C-a

# 配置重载快捷键：prefix R
bind R source-file ~/.tmux.conf \; display-message "Config reloaded.."

# 快捷键查看man
bind / command-prompt "split-window 'exec man %%'"


# ------------------------------- session begin -------------------------------
bind -r ( switch-client -p
bind -r ) switch-client -n
# -------------------------------- session end --------------------------------


# -------------------------------- window begin -------------------------------
set -g base-index 1                     # 窗口的初始序号；默认为0，这里设置为1

setw -g pane-base-index 1               # 窗格的初始序号；默认为0，这里设置为1
setw -g other-pane-height 25
setw -g other-pane-width 80

# [prefix-c] 创建新窗口
bind c new-window
# [prefix-数字] 切换窗口

# [prefix-X] 关闭窗口
bind X confirm-before -p "kill-window #W? (y/n)" kill-window

# [prefix-t/T] 切换窗口
bind t next-window
bind T previous-window

# [prefix-Ctrl-o] 窗口轮转
bind C-o rotate-window

# 快捷调整窗口分割到全屏
# 使用 PREFIX-z 来实现暂时全屏

# -------------------------------- window end ---------------------------------


# -------------------------------- pane begin ---------------------------------
# use vim-like keys for splits and windows
# v / s 竖直、水平分割window为pane
unbind '"'
unbind %
# 窗口切割  split windows like vim.  - Note: vim's definition of a horizontal/vertical split is reversed from tmux's
# [prefix-v] / [prefix-s] 垂直/水平分割窗口
# bind v split-window -h
# bind s split-window -v

# 使用直观的竖线和横线来分割窗口
# 键 [\|] 和 [_-] 少敲一个shift键
bind \ split-window -h
bind - split-window -v

# 窗口间切换
# [prefix-hjkl] pane之间移动
unbind h
bind -r h select-pane -L
unbind j
bind -r j select-pane -D
unbind k
bind -r k select-pane -U
unbind l
bind -r l select-pane -R
# smart pane switching with awareness of vim splits
# [Ctrl-hjkl] pane之间移动，和系统快捷键有冲突，已取消
# bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-h) || tmux select-pane -L"
# bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-j) || tmux select-pane -D"
# bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-k) || tmux select-pane -U"
# bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-l) || tmux select-pane -R"
# [Ctrl-l] 左右两个切  [Ctrl-\] 最近的两个切换
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys 'C-\\') || tmux select-pane -l"
# bind C-l send-keys 'C-l'

# [prefix-q] 展示窗口数字并选择跳转
bind q display-panes
# bind a last-pane # 绑什么好?

# 窗口大小调整
# resize panes using PREFIX H, J, K, L
bind H resize-pane -L 5
bind J resize-pane -D 5
bind K resize-pane -U 5
bind L resize-pane -R 5
# -------------------------------- pane end -----------------------------------


# -------------------------- move/copy/paste begin ----------------------------
# use vi mode
# vi is good  把 Tmux 设为 vi 模式，使其与 Vim 的操作更加接近
setw -g mode-keys vi

# [ 进入复制
#   SpaceBar    开始选择问题
#   Arrow       移动
#   Enter       复制(发送到 Mac 粘贴板)
# ] 黏贴
bind [ copy-mode
bind ] paste-buffer

# Copy and paste like in vim
# p 换成paste
unbind p
bind p paste-buffer

# the following copy-mode-vi bindings match my vim settings
#   see https://github.com/gpakosz/.vim.git
# Setup 'v' to begin selection as in Vim
# bind -T copy-mode-vi v begin-selection
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi C-v send -X rectangle-toggle
# bind -T copy-mode-vi y copy-selection
# 把剪贴板同步到 macOS 的系统剪贴板
if -b 'which -s reattach-to-user-namespace' 'bind y run "tmux save-buffer - | reattach-to-user-namespace pbcopy"'
bind -T copy-mode-vi Escape send -X cancel
bind -T copy-mode-vi H send -X start-of-line
bind -T copy-mode-vi L send -X end-of-line
# Update default binding of `Enter` to also use copy-pipe
unbind -T copy-mode-vi Enter
bind -T copy-mode-vi Enter send -X copy-pipe "reattach-to-user-namespace pbcopy"

# for osx
# see https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard
if 'which -s reattach-to-user-namespace' 'set -g default-command "exec initializing... 2> /dev/null & reattach-to-user-namespace $SHELL -l"'
# ---------------------------- move/copy/paste end ----------------------------


# -------------------------------- mouse begin --------------------------------
# mouse behavior
# 可以用鼠标操作选择窗口、窗格和调整窗格大小
setw -g mouse on
# --------------------------------- mouse end ---------------------------------


# ----------------------------- status line begin  ----------------------------
# 颜色
set -g status-fg white
set -g status-bg black
set -g status-left-fg white
set -g status-left-bg black
set -g status-right-fg white
set -g status-right-bg black

set -g status-left-length 90
set -g status-right-length 60

# 对齐方式
set -g status-justify centre

# 左下角
set -g status-left '#[fg=green][#[fg=cyan]#S#[fg=green]]'
set -ag status-left ":W-#I:P-#P"

# 窗口列表
setw -g automatic-rename on
set -g allow-rename off
setw -g window-status-format '#[dim]#I:#[dim]#W#[fg=grey,dim]'
setw -g window-status-current-format '#[fg=red,bold,bg=white][#I:#W]'

# 右下角
set -g status-right '#{prefix_highlight}#[fg=green][#[fg=blue]%m-%d %H:%M#[fg=green]]'

# tmux prefix highlight 指示器配置
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr 'fg=black,bg=yellow,bold'
set -g @prefix_highlight_prefix_prompt 'Wait'
set -g @prefix_highlight_copy_prompt 'Copy'
# ----------------------------- status line end -------------------------------


# -------------------------------- color begin --------------------------------
# set inactive/active window styles
# set -g window-style 'fg=colour247,bg=colour236'
# set -g window-active-style 'fg=colour250,bg=black'

# pane border
set -g pane-border-bg colour235
set -g pane-border-fg colour238
set -g pane-active-border-bg colour236
set -g pane-active-border-fg colour100
# ----------------------------- base config end -------------------------------


# --------------------------- plugin config begin -----------------------------
# run `git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm` first
# Use [prefix]-I to install new plug-ins
# Use [prefix]-U to update plug-ins
# Use [prefix]-alt-u to uninstall plug-ins

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'

# Other examples:
# set -g @plugin 'github_username/plugin_name'plugin
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
# ----------------------------- plugin config end -----------------------------
