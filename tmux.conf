#==========================================
# URL: https://github.com/wklken/k-tmux
# Author:  wklken
# Version: 0.1
# Email: wklken@yeah.net
# ReadMe: README.md
# Donation: http://www.wklken.me/pages/donation.html
# Last_modify: 2015-08-06
#==========================================
# Forker information
# Forker: quentin-chen
# URL: https://github.com/quentin-chen/k-tmux
# Last_modify: Nov 17, 2016
# Based on: Tmux 2.3 @ Mac OS 10.11/ Ubuntu 14
#==========================================
# Dependecny:
#    1. brew install reattach-to-user-namespace
#    2. gem install tmuxinator
#    3. vim: christoomey/vim-tmux-navigator


#--------------------------- base config begin -------------------------------

# 全局设置
setw -g xterm-keys on
set-option -g default-terminal "screen-256color"  # 设置终端类型为256色
set-option -g history-limit 100000                # 回滚行数设置
set-option -g display-time 5000                   # 提示信息的持续时间；设置足够的时间以避免看不清提示，单位为毫秒
set-option -g repeat-time 1000                    # 控制台激活后的持续时间；设置合适的时间以避免每次操作都要先激活控制台，单位为毫秒
set-window-option -g display-panes-time 1500
#set-option -g repeat-time 0                       #  控制台激活后的持续时间设置为0，这样在敲完命令后可以马上使用方向键
# 24 hour clock
setw -g clock-mode-style 24

set-option -g renumber-windows on                 #  开启窗口重编号，0、1、2，移除1后变为0，1

#  设置窗口通知
setw -g monitor-activity on
set -g visual-activity on

# 把修饰键绑定为 C-b
set-option -g prefix C-a
unbind-key C-b
bind-key C-a send-prefix

# 配置重载快捷键：prefix R
bind R source-file ~/.tmux.conf \; display-message "Config reloaded.."

# 快捷键查看man
bind / command-prompt "split-window 'exec man %%'"


# -------------------------------- session begin --------------------------------
bind -r ( switch-client -p
bind -r ) switch-client -n
# -------------------------------- session end --------------------------------

# -------------------------------- window begin --------------------------------
set-option -g base-index 1                        # 窗口的初始序号；默认为0，这里设置为1

set-window-option -g pane-base-index 1            # 窗格的初始序号；默认为0，这里设置为1
set-window-option -g other-pane-height 25
set-window-option -g other-pane-width 80

# [prefix-c] 创建新窗口
bind-key c new-window
# [prefix-数字] 切换窗口

# [prefix-t/T] 切换窗口
bind-key t next-window
bind-key T previous-window
# bind-key space next-window
# bind-key bspace previous-window

# [prefix-Ctrl-o] 窗口轮转
bind-key C-o rotate-window

# 快捷调整窗口分割到全屏
unbind Up
bind Up new-window -d -n tmp \; swap-pane -s tmp.1 \; select-window -t tmp
unbind Down
bind Down last-window \; swap-pane -s tmp.1 \; kill-window -t tmp

# -------------------------------- window end --------------------------------

# -------------------------------- pane begin --------------------------------
# use vim-like keys for splits and windows
# v / s 竖直、水平分割window为pane
unbind '"'
unbind %
# 窗口切割  split windows like vim.  - Note: vim's definition of a horizontal/vertical split is reversed from tmux's
# [prefix-v] / [prefix-s] 垂直/水平分割窗口
# bind-key v split-window -h
# bind-key s split-window -v

# key bindings for horizontal and vertical panes
# 键 [\|] 和 [_-] 少敲一个shift键
bind-key \ split-window -h
bind-key - split-window -v

# 窗口间切换
# [prefix-hjkl] pane之间移动
unbind-key h
bind-key h select-pane -L
unbind-key j
bind-key j select-pane -D
unbind-key k
bind-key k select-pane -U
unbind-key l
bind-key l select-pane -R
# smart pane switching with awareness of vim splits
# [Ctrl-hjkl] pane之间移动
# bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-h) || tmux select-pane -L"
# bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-j) || tmux select-pane -D"
# bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-k) || tmux select-pane -U"
# bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-l) || tmux select-pane -R"
# [Ctrl-l] 左右两个切  [Ctrl-\] 最近的两个切换
# bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys 'C-\\') || tmux select-pane -l"
# bind C-l send-keys 'C-l'

# [prefix-q] 展示窗口数字并选择跳转
bind-key q display-panes
# bind-key a last-pane # 绑什么好?

# 窗口大小调整
# resize panes using PREFIX H, J, K, L
bind H resize-pane -L 5
bind J resize-pane -D 5
bind K resize-pane -U 5
bind L resize-pane -R 5

# layout
# [prefix-space]
# bind-key + select-layout main-horizontal
# bind-key = select-layout main-vertical

# -------------------------------- pane end --------------------------------

# -------------------------------- move/copy/paste begin --------------------------------
# use vi mode
# vi is good  把 Tmux 设为 vi 模式，使其与 Vim 的操作更加接近
setw -g mode-keys vi

# [ 进入复制，space键开始选择问题  方向键移动，  回车复制  ] 黏贴
bind-key [ copy-mode
bind-key ] paste-buffer

# Copy and paste like in vim
# p 换成paste
unbind p
bind p paste-buffer


# the following vi-copy bindings match my vim settings
#   see https://github.com/gpakosz/.vim.git
# Setup 'v' to begin selection as in Vim
# bind -t vi-copy v begin-selection
bind-key -t vi-copy v begin-selection
bind -t vi-copy C-v rectangle-toggle
# bind -t vi-copy y copy-selection
# 把剪贴板同步到 macOS 的系统剪贴板
if -b 'which -s reattach-to-user-namespace' 'bind y run "tmux save-buffer - | reattach-to-user-namespace pbcopy"'
bind -t vi-copy Escape cancel
bind -t vi-copy H start-of-line
bind -t vi-copy L end-of-line
# Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"


# for osx
# see https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard
if 'which -s reattach-to-user-namespace' 'set -g default-command "exec initializing... 2> /dev/null & reattach-to-user-namespace $SHELL -l"'
# -------------------------------- move/copy/paste end --------------------------------

# -------------------------------- mouse begin --------------------------------
# mouse behavior
setw -g mouse on
# -------------------------------- mouse end --------------------------------

# -------------------------------- status line begin  --------------------------------
# 颜色
# set-option -g status-bg black
# set-option -g status-fg white

set -g status-fg white
set -g status-bg black
set -g status-left-fg white
set -g status-left-bg black
set -g status-right-fg white
set -g status-right-bg black

set -g status-left-length 90
set -g status-right-length 60

# 对齐方式
set-option -g status-justify centre

# 左下角
set-option -g status-left '#[fg=green][#[fg=cyan]#S#[fg=green]]'
set-option -ag status-left ":W-#I:P-#P"

# 窗口列表
setw -g automatic-rename on
# set-window-option -g window-status-current-fg magenta
set-window-option -g window-status-format '#[dim]#I:#[dim]#W#[fg=grey,dim]'
set-window-option -g window-status-current-format '#[fg=white,bold,bg=cyan][#I:#W]'


# 右下角
set -g status-right '#[fg=green][#[fg=white]%m-%d %H:%M#[fg=green]]'


# -------------------------------- status line end --------------------------------
# -------------------------------- color begin --------------------------------

# pane border colors
set-option -g pane-active-border-fg green       #Solarized 'green'
set-option -g pane-border-fg '#586e75'          #Solarized 'base01'
# set -g pane-border-fg colour245

# --------------------------- base config end -------------------------------
